$date
	Wed Dec  5 18:20:23 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module PE $end
$var wire 1 ! clk $end
$var wire 1 " fpu_done $end
$var wire 1 # pendpc $end
$var wire 1 $ pendz $end
$var wire 1 % reset $end
$var wire 1 & systemhalt $end
$var wire 16 ' fpu_result [15:0] $end
$var reg 1 ( fpu_en $end
$var reg 1 ) halt $end
$var reg 1 * havepre $end
$var reg 16 + im0 [15:0] $end
$var reg 16 , ir [15:0] $end
$var reg 16 - ir0 [15:0] $end
$var reg 16 . ir1 [15:0] $end
$var reg 1 / jump $end
$var reg 16 0 pc [15:0] $end
$var reg 16 1 pc0 [15:0] $end
$var reg 12 2 prefix [11:0] $end
$var reg 16 3 rd1 [15:0] $end
$var reg 16 4 res [15:0] $end
$var reg 16 5 rn1 [15:0] $end
$var reg 16 6 target [15:0] $end
$var reg 16 7 tpc [15:0] $end
$var reg 1 8 wait1 $end
$var reg 1 9 zreg $end
$scope function iscond $end
$var reg 16 : inst [15:0] $end
$var reg 1 ; iscond $end
$upscope $end
$scope function setspc $end
$var reg 16 < inst [15:0] $end
$var reg 1 = setspc $end
$upscope $end
$scope function setsrd $end
$var reg 16 > inst [15:0] $end
$var reg 1 ? setsrd $end
$upscope $end
$scope function setsz $end
$var reg 16 @ inst [15:0] $end
$var reg 1 A setsz $end
$upscope $end
$scope function usesim $end
$var reg 16 B inst [15:0] $end
$var reg 1 C usesim $end
$upscope $end
$scope function usesrd $end
$var reg 16 D inst [15:0] $end
$var reg 1 E usesrd $end
$upscope $end
$scope function usesrn $end
$var reg 16 F inst [15:0] $end
$var reg 1 G usesrn $end
$upscope $end
$scope module myfpu $end
$var wire 1 ! clk $end
$var wire 1 ( en $end
$var wire 5 H instr [4:0] $end
$var wire 16 I op1 [15:0] $end
$var wire 16 J op2 [15:0] $end
$var wire 5 K d [4:0] $end
$var reg 1 L done $end
$var reg 8 M exp [7:0] $end
$var reg 16 N int [15:0] $end
$var reg 16 O result [15:0] $end
$var reg 1 P sign $end
$var integer 32 Q state [31:0] $end
$var integer 32 R tmp [31:0] $end
$scope module lead0 $end
$var wire 16 S s [15:0] $end
$var reg 5 T d [4:0] $end
$var reg 2 U s2 [1:0] $end
$var reg 4 V s4 [3:0] $end
$var reg 8 W s8 [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module PE $end
$var reg 16 X \r[0] [15:0] $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module PE $end
$var reg 16 Y \r[1] [15:0] $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module PE $end
$var reg 16 Z \r[2] [15:0] $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module PE $end
$var reg 16 [ \r[3] [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 [
b0 Z
b101000 Y
b0 X
bx W
bx V
bx U
bx T
bx S
bx R
b110010 Q
xP
bx O
bx N
bx M
1L
bx K
bx J
bx I
b0 H
xG
bx F
xE
bx D
xC
bx B
0A
b0 @
0?
b0 >
0=
b0 <
x;
bx :
x9
x8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
b0 0
0/
b0 .
b0 -
bx ,
bx +
0*
0)
0(
bx '
0&
0%
0$
0#
1"
0!
$end
#10
b0 [
b0 Z
b101000 Y
b0 X
1%
#20
b0 [
b0 Z
b101000 Y
b0 X
0%
#30
b10011000100001 @
1?
b10011000100001 >
b10011000100001 <
b0 1
b1 0
b10011000100001 -
b0 5
b0 J
b0 3
b0 I
0;
b10011000100001 :
b10011000100001 ,
b0 7
0C
b10011000100001 B
08
1G
b0 F
0E
b0 D
1!
#40
0!
#50
b10011 H
b10011000100001 @
b10011000100001 <
b10011000100001 .
b101000 5
b101000 J
b1 1
b10 0
b11111111111111 -
b10011000100001 F
1E
b10011000100001 D
1?
b10011000100001 >
b10011000100001 B
b11111111111111 :
b11111111111111 ,
b1 7
1!
#51
1(
#52
bx Z
#60
0!
#70
x$
x#
b10 U
b10 V
b101000 W
b1010 K
b1010 T
x&
xA
x=
b11111 H
bx @
x?
bx >
bx <
b110011 Q
b101000 N
b101000 S
0P
x"
0L
b10 1
b11 0
bx -
b11111111111111 .
b1 5
b1 J
b1 3
b1 I
xC
x;
bx :
bx ,
b10 7
bx B
0G
b11111111111111 F
0E
b11111111111111 D
1!
#80
0!
#90
b110100 Q
b10100000000000000 R
b10000100 M
1!
#100
0!
#110
0&
1"
1L
b100001000100000 '
b100001000100000 O
1!
#111
1)
0A
0?
b11111111111111 >
b11111111111111 @
#120
0!
